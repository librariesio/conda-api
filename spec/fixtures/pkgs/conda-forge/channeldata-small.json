{
  "channeldata_version": 1,
  "packages": {
    "_current_repodata_hack_gcc_linux_64_75": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854591,
      "version": "0.0.3"
    },
    "_current_repodata_hack_gcc_linux_64_84": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854615,
      "version": "0.0.3"
    },
    "_current_repodata_hack_gcc_linux_aarch64_75": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "linux-aarch64",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854683,
      "version": "0.0.3"
    },
    "_current_repodata_hack_gcc_linux_aarch64_84": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "linux-aarch64",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854759,
      "version": "0.0.3"
    },
    "_current_repodata_hack_gcc_linux_ppc64le_75": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "linux-ppc64le",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854831,
      "version": "0.0.3"
    },
    "_current_repodata_hack_gcc_linux_ppc64le_84": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "As of writing, conda-forge has versions of the linux compilers that are ahead of the ones in the global pinnings. The current_repodata.json file only pulls in the latest version of a package by default. Thus anytime one asks for the compilers in the pinnings, the solver will always fail on current_repodata.json and have to pull all of the repodata. The packages here make sure the latest versions of the compilers we use are in current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. It also helps in cases when the solver appears to pull older builds of the compilers when they are not explicitly asked for in the environment.",
      "home": "https://github.com/conda-forge/_current_repodata_hack-feedstock",
      "license": "LicenseRef-OTHER",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "linux-ppc64le",
        "noarch"
      ],
      "summary": "Meta-package to fix current_repodata",
      "text_prefix": false,
      "timestamp": 1599854903,
      "version": "0.0.3"
    },
    "21cmfast": {
      "activate.d": false,
      "binary_prefix": true,
      "deactivate.d": false,
      "description": "21cmFAST provides a simple and fast simulation package for the cosmological 21cm signal as either coeval cubes or full lightcones.",
      "dev_url": "https://github.com/21cmFAST/21cmFAST",
      "doc_url": "https://21cmFAST.readthedocs.io/",
      "home": "https://github.com/21cmFAST/21cmFAST",
      "license": "MIT",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/2/21cmFAST/21cmFAST-3.2.0.tar.gz",
      "subdirs": [
        "linux-64",
        "osx-64"
      ],
      "summary": "A semi-numerical cosmological simulation code for the 21cm signal",
      "text_prefix": true,
      "timestamp": 1637602476,
      "version": "3.2.0"
    },
    "2dfatmic": {
      "activate.d": false,
      "binary_prefix": true,
      "deactivate.d": false,
      "description": "This model simulates subsurface flow, fate, and transport of contaminants that are undergoing chemical or biological transformations. This model is applicable to transient conditions in both saturated and unsaturated zones.",
      "doc_url": "https://nepis.epa.gov/Adobe/PDF/P1006YEP.pdf",
      "home": "https://www.epa.gov/water-research/two-dimensional-subsurface-flow-fate-and-transport-microbes-and-chemicals-2dfatmic",
      "license": "Public Domain",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "subdirs": [
        "linux-64",
        "osx-64"
      ],
      "summary": "Two-Dimensional Subsurface Flow, Fate and Transport of Microbes and Chemicals Model",
      "text_prefix": false,
      "timestamp": 1602245771,
      "version": "1.0"
    },
    "4ti2": {
      "activate.d": false,
      "binary_prefix": true,
      "deactivate.d": false,
      "dev_url": "https://github.com/4ti2/4ti2",
      "doc_url": "https://4ti2.github.io/",
      "home": "https://4ti2.github.io/",
      "license": "GPL-2.0-or-later",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://github.com/4ti2/4ti2/releases/download/Release_1_6_9/4ti2-1.6.9.tar.gz",
      "subdirs": [
        "linux-64",
        "osx-64"
      ],
      "summary": "A software package for algebraic, geometric and combinatorial problems on linear spaces",
      "text_prefix": false,
      "timestamp": 1674265233,
      "version": "1.6.9"
    },
    "abess": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "abess (Adaptive BEst-Subset Selection) library aims to solve general best subset selection, i.e., find a small subset of predictors such that the resulting model is expected to have the highest accuracy. This library implements a generic algorithm framework to find the optimal solution in an extremely fast way. This framework now supports the detection of best subset under: linear regression, (multi-class) classification, censored-response modeling, multi-response modeling (a.k.a. multi-tasks learning), etc. It also supports the variants of best subset selection like group best subset selection. Especially, the time complexity of (group) best subset selection for linear regression is certifiably polynomial.",
      "dev_url": "https://github.com/abess-team/abess",
      "doc_url": "https://abess.readthedocs.io",
      "home": "https://abess.readthedocs.io",
      "license": "GPL-2.0-or-later",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/a/abess/abess-0.4.6.tar.gz",
      "subdirs": [
        "linux-64",
        "osx-64",
        "win-64"
      ],
      "summary": "Fast Best-Subset Selection",
      "text_prefix": false,
      "timestamp": 1649922099,
      "version": "0.4.6"
    },
    "about-time": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "home": "https://github.com/rsalmei/about-time",
      "license": "MIT",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/a/about-time/about-time-4.2.1.tar.gz",
      "subdirs": [
        "noarch"
      ],
      "summary": "Easily measure timing and throughput of code blocks, with beautiful human friendly representations.",
      "text_prefix": false,
      "timestamp": 1668069681,
      "version": "4.2.1"
    },
    "absl-py": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "dev_url": "https://github.com/abseil/abseil-py",
      "doc_url": "https://abseil.io/docs/",
      "home": "https://github.com/abseil/abseil-py",
      "license": "Apache-2.0",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/a/absl-py/absl-py-1.4.0.tar.gz",
      "subdirs": [
        "linux-64",
        "noarch",
        "osx-64",
        "win-64"
      ],
      "summary": "Abseil Python Common Libraries, see https://github.com/abseil/abseil-py.",
      "text_prefix": false,
      "timestamp": 1540473104,
      "version": "1.4.0"
    },
    "ansible-core": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "home": "https://ansible.com/",
      "license": "GPL-3.0-or-later",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/a/ansible-core/ansible-core-2.14.3.tar.gz",
      "subdirs": [
        "noarch"
      ],
      "summary": "Radically simple IT automation",
      "text_prefix": true,
      "timestamp": 1658185981,
      "version": "2.14.3"
    },
    "black": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "description": "Black is the uncompromising Python code formatter. By using it, you agree to cease control over minutiae of hand-formatting. In return, Black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters.",
      "dev_url": "https://github.com/psf/black",
      "doc_url": "https://black.readthedocs.io/",
      "home": "https://github.com/psf/black",
      "license": "MIT",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {},
      "source_url": "https://pypi.io/packages/source/b/black/black-23.1.0.tar.gz",
      "subdirs": [
        "linux-64",
        "linux-aarch64",
        "linux-ppc64le",
        "noarch",
        "osx-64",
        "osx-arm64",
        "win-64"
      ],
      "summary": "The uncompromising code formatter.",
      "text_prefix": true,
      "timestamp": 1663264990,
      "version": "23.1.0"
    },
    "zziplib": {
      "activate.d": false,
      "binary_prefix": false,
      "deactivate.d": false,
      "home": "http://zziplib.sourceforge.net/",
      "license": "GPL-2.0",
      "post_link": false,
      "pre_link": false,
      "pre_unlink": false,
      "run_exports": {
        "0.13.69": {
          "weak": [
            "zziplib >=0.13.69,<0.14.0a0"
          ]
        }
      },
      "subdirs": [
        "linux-64",
        "linux-aarch64",
        "linux-ppc64le",
        "osx-64",
        "osx-arm64",
        "win-64"
      ],
      "summary": "The zziplib library is intentionally lightweight, it offers the ability to easily extract data from files archived in a single zip file.",
      "text_prefix": true,
      "timestamp": 1617437822,
      "version": "0.13.69"
    }
  },
  "subdirs": [
    "linux-32",
    "linux-64",
    "linux-aarch64",
    "linux-armv6l",
    "linux-armv7l",
    "linux-ppc64",
    "linux-ppc64le",
    "linux-s390x",
    "noarch",
    "osx-64",
    "osx-arm64",
    "win-32",
    "win-64",
    "win-arm64",
    "zos-z"
  ]
}